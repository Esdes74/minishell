==11048== Memcheck, a memory error detector
==11048== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==11048== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==11048== Command: ./minishell
==11048== Parent PID: 11047
==11048== 
==11048== error calling PR_SET_PTRACER, vgdb might block
==11048== Invalid read of size 1
==11048==    at 0x110854: replace_variable (check_variables.c:144)
==11048==    by 0x110312: check_variables (check_variables.c:38)
==11048==    by 0x10C4AC: verif_read (verif_read.c:44)
==11048==    by 0x10973A: main (main.c:69)
==11048==  Address 0x4b088a8 is 0 bytes after a block of size 8 alloc'd
==11048==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==11048==    by 0x10BAE7: parsing (parsing.c:202)
==11048==    by 0x10C3AD: verif_read (verif_read.c:29)
==11048==    by 0x10973A: main (main.c:69)
==11048== 
==11048== Conditional jump or move depends on uninitialised value(s)
==11048==    at 0x110344: check_variables (check_variables.c:30)
==11048==    by 0x10C4AC: verif_read (verif_read.c:44)
==11048==    by 0x10973A: main (main.c:69)
==11048== 
==11049== Conditional jump or move depends on uninitialised value(s)
==11049==    at 0x112890: ft_strlen (ft_strlen.c:20)
==11049==    by 0x112404: ft_strdup (ft_strdup.c:20)
==11049==    by 0x10C7B1: string_for_cmd_center (verif_read_utils.c:63)
==11049==    by 0x10CA17: execution_center (execution_center.c:50)
==11049==    by 0x10C4CE: verif_read (verif_read.c:46)
==11049==    by 0x10973A: main (main.c:69)
==11049== 
==11049== Conditional jump or move depends on uninitialised value(s)
==11049==    at 0x112890: ft_strlen (ft_strlen.c:20)
==11049==    by 0x11256A: ft_strlcpy (ft_strlcpy.c:27)
==11049==    by 0x112441: ft_strdup (ft_strdup.c:24)
==11049==    by 0x10C7B1: string_for_cmd_center (verif_read_utils.c:63)
==11049==    by 0x10CA17: execution_center (execution_center.c:50)
==11049==    by 0x10C4CE: verif_read (verif_read.c:46)
==11049==    by 0x10973A: main (main.c:69)
==11049== 
==11049== 
==11049== HEAP SUMMARY:
==11049==     in use at exit: 200,655 bytes in 214 blocks
==11049==   total heap usage: 527 allocs, 313 frees, 233,538 bytes allocated
==11049== 
==11049== LEAK SUMMARY:
==11049==    definitely lost: 0 bytes in 0 blocks
==11049==    indirectly lost: 0 bytes in 0 blocks
==11049==      possibly lost: 0 bytes in 0 blocks
==11049==    still reachable: 0 bytes in 0 blocks
==11049==         suppressed: 200,655 bytes in 214 blocks
==11049== 
==11049== Use --track-origins=yes to see where uninitialised values come from
==11049== For lists of detected and suppressed errors, rerun with: -s
==11049== ERROR SUMMARY: 6 errors from 4 contexts (suppressed: 0 from 0)
